#include <WiFi.h>
#include <WiFiClientSecure.h>
#include <UniversalTelegramBot.h>
#include <WiFiClient.h>
#include <WiFiAP.h>
#include <WiFiMulti.h>
#include <NTPClient.h>
#include <WiFiUdp.h>
#include <Wire.h>
#include <Adafruit_SSD1306.h>

// Wifi network station credentials
#define WIFI_SSID "10S"
#define WIFI_PASSWORD "tututoto"
// Telegram BOT Token (Get from Botfather)
#define BOT_TOKEN "5909300555:AAFJ6HrvRvMHdH9Sry3HijomAfPT5EH9qYY"
#define OLED_RESET 4
Adafruit_SSD1306 display(OLED_RESET);

const unsigned long BOT_MTBS = 1000; // mean time between scan messages

const long utcOffsetInSeconds = 3600 * 3; // Set the UTC offset
const char* ntpServer = "pool.ntp.org";

WiFiClientSecure secured_client;
UniversalTelegramBot bot(BOT_TOKEN, secured_client);
unsigned long bot_lasttime;          // last time messages' scan has been done

WiFiUDP ntpUDP;
NTPClient timeClient(ntpUDP, ntpServer, utcOffsetInSeconds);

int alarmHour = 10; // Set the alarm hour
int alarmMinute = 0; // Set the alarm minute
bool alarmTriggered = false;
int alarm_interval = 5000;

void handleNewMessages(int numNewMessages)
{

  bot.setMyCommands("[{\"command\":\"start\", \"description\":\"start conversation\"},{\"command\":\"set wake up time\",\"description\":\"-\"}]");
  Serial.println("handleNewMessages");
  Serial.println(String(numNewMessages));

  for (int i = 0; i < numNewMessages; i++)
  {
    String chat_id = bot.messages[i].chat_id;
    String text = bot.messages[i].text;

    String from_name = bot.messages[i].from_name;
    if (from_name == "")
      from_name = "Guest";

    String keyboardJson = "[[\"/AlarmClock\", \"/Light\"],[\"/Functions\"],[\"/Nothing\"]]";
    bot.sendMessageWithReplyKeyboard(chat_id, "", "", keyboardJson, true);
    
    if (text == "/nothing"){
      String keyboardJson = "[[\"/AlarmClock\", \"/Light\"],[\"/Functions\"],[\"/Nothing\"]]";
      bot.sendMessageWithReplyKeyboard(chat_id, "", "", keyboardJson, true);
    }
    if (text == "/AlarmClock")
    {
      String keyboardJson = "[[\"/set wake up time\", \"/Сбросить_AlarmClock\"],[\"/Back\"]]";
      bot.sendMessageWithReplyKeyboard(chat_id, "", "", keyboardJson, true);
      
      if (text == "/Back"){
        String keyboardJson = "[[\"/AlarmClock\", \"/Light\"],[\"/Functions\"],[\"/Nothing\"]]";
        bot.sendMessageWithReplyKeyboard(chat_id, "", "", keyboardJson, true);
      }
    }

    if (text == "/Light")
    {
      String keyboardJson = "[[\"/Выбрать_цвет\", \"/Выключить_Light\"],[\"/Back\"]]";
      if (text == "/Back"){
        String keyboardJson = "[[\"/AlarmClock\", \"/Light\"],[\"/Functions\"],[\"/Nothing\"]]";
        bot.sendMessageWithReplyKeyboard(chat_id, "", "", keyboardJson, true);
      }
      
    }
    
    if (text == "/set wake up time")
    { 
      String request1 = "Напиши мне во сколько часов нужен AlarmClock";
      bot.sendMessage(chat_id, request1, "Markdown");
      //if (text != "/set wake up time"){
      //  alarmHour = text.toInt();
      //}
      delay(3000);
      Serial.print(text);
      text = "/nothing";
      if (text == "/Back"){
        String keyboardJson = "[[\"/AlarmClock\", \"/Light\"],[\"/Functions\"],[\"/Nothing\"]]";
        bot.sendMessageWithReplyKeyboard(chat_id, "", "", keyboardJson, true);
      }
      
    }

    if (text == "/nothing")
    {
      String keyboardJson = "[[\"/AlarmClock\", \"/Light\"],[\"/Functions\"],[\"/Nothing\"]]";
      bot.sendMessageWithReplyKeyboard(chat_id, "", "", keyboardJson, true);
    }

    if (text == "/start")
    {
      String welcome = "Привет, " + from_name + ", этот бот предназначен для твоего умного AlarmClockа, здесь ты можешь установить/сбросить AlarmClock, поменять цвета лампы. " +"\n";
      welcome += "Знакомься с функциями ниже\n\n";
      welcome += "/nothing : выход в главное меню\n";
      welcome += "/AlarmClock : для установки/сброса AlarmClockа\n";
      welcome += "/Light : управление лампой\n";
      welcome += "/Nothing : здесь пока Nothing, но очень скоро появится\n";
      bot.sendMessage(chat_id, welcome);

      String keyboardJson = "[[\"/AlarmClock\", \"/Light\"],[\"/nothing\"],[\"/Nothing\"]]";
      bot.sendMessageWithReplyKeyboard(chat_id, "Выбери необходимое:", "", keyboardJson, true);
    }
  }
}

void setup()
{
  Serial.begin(115200);

  display.begin(SSD1306_SWITCHCAPVCC, 0x3C);
  display.clearDisplay();
  display.setTextColor(WHITE);
  display.setTextSize(3);
  display.setCursor(0, 0);
  display.clearDisplay();
  display.display();

  // attempt to connect to Wifi network:
  Serial.print("Connecting to Wifi SSID ");
  Serial.print(WIFI_SSID);
  WiFi.begin(WIFI_SSID, WIFI_PASSWORD);
  secured_client.setCACert(TELEGRAM_CERTIFICATE_ROOT); // Add root certificate for api.telegram.org
  while (WiFi.status() != WL_CONNECTED)
  {
    Serial.print(".");
    delay(500);
  }
  Serial.print("\nWiFi connected. IP address: ");
  Serial.println(WiFi.localIP());

  Serial.print("Retrieving time: ");
  configTime(0, 0, ntpServer); // get UTC time via NTP
  time_t now = time(nullptr);
  while (now < 24 * 3600)
  {
    now = time(nullptr);
  }
  Serial.println(now);

  timeClient.begin();
  while(!timeClient.update()) {
    timeClient.forceUpdate();
  }

}

void loop()
{
  if (millis() - bot_lasttime > BOT_MTBS)
  {
    int numNewMessages = bot.getUpdates(bot.last_message_received + 1);

    while (numNewMessages)
    {
      Serial.println("got response");
      handleNewMessages(numNewMessages);
      numNewMessages = bot.getUpdates(bot.last_message_received + 1);
    }

    bot_lasttime = millis();

  timeClient.update();

  int hour = timeClient.getHours();
  int minute = timeClient.getMinutes();

  display.clearDisplay();
  display.setCursor(10, 0);
  display.print(hour);
  display.print(":");
  if (minute < 10) {
    display.print("0");
  }
  display.print(minute);
  display.display();
  

  if (hour == alarmHour && minute == alarmMinute && !alarmTriggered) {
    alarmTriggered = true;
    display.clearDisplay();
    display.setCursor(10, 10);
    display.println("ALARM");
    //bot.sendMessage(chat_id, "AlarmClock звенит", "Markdown");
    display.display();
    delay(alarm_interval);   
    
  }

  if (alarmTriggered && (hour != alarmHour || minute != alarmMinute)) {
    alarmTriggered = false;
    display.clearDisplay();
    display.display();
  }
    
  }
}
